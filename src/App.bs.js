// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function App(Props) {
  var match = React.useReducer((function (state, action) {
          var match = action[/* type_ */0];
          if (match) {
            return /* record */[
                    /* tempoMin */state[/* tempoMin */0],
                    /* tempoSec */action[/* payload */1]
                  ];
          } else {
            return /* record */[
                    /* tempoMin */action[/* payload */1],
                    /* tempoSec */state[/* tempoSec */1]
                  ];
          }
        }), /* record */[
        /* tempoMin */0,
        /* tempoSec */0
      ]);
  var dispatch = match[1];
  var state = match[0];
  return React.createElement("div", undefined, React.createElement("label", undefined, "Tempo", React.createElement("input", {
                      value: state[/* tempoMin */0].toString(),
                      onChange: (function ($$event) {
                          var value = $$event.target.value;
                          var tmp;
                          try {
                            tmp = Caml_format.caml_int_of_string(value);
                          }
                          catch (raw_exn){
                            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                            if (exn[0] === Caml_builtin_exceptions.failure) {
                              if (exn[1] === "int_of_string") {
                                tmp = 0;
                              } else {
                                throw exn;
                              }
                            } else {
                              throw exn;
                            }
                          }
                          return Curry._1(dispatch, /* record */[
                                      /* type_ : ChangeTempoMin */0,
                                      /* payload */tmp
                                    ]);
                        })
                    }), ":", React.createElement("input", {
                      value: state[/* tempoSec */1].toString(),
                      onChange: (function ($$event) {
                          var value = $$event.target.value;
                          var tmp;
                          try {
                            tmp = Caml_format.caml_int_of_string(value);
                          }
                          catch (raw_exn){
                            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                            if (exn[0] === Caml_builtin_exceptions.failure) {
                              if (exn[1] === "int_of_string") {
                                tmp = 0;
                              } else {
                                throw exn;
                              }
                            } else {
                              throw exn;
                            }
                          }
                          return Curry._1(dispatch, /* record */[
                                      /* type_ : ChangeTempoSec */1,
                                      /* payload */tmp
                                    ]);
                        })
                    })), React.createElement("div", undefined, "Speed " + ((60 / (state[/* tempoMin */0] + state[/* tempoSec */1] / 60)).toString() + " km/h")));
}

var make = App;

exports.make = make;
/* react Not a pure module */
